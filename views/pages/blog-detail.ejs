<%- include('../partials/head') %> <%- include('../partials/nav') %>

<section class="container">
  <article class="card">
    <div class="image">
       <% if (blog.image) { %>
      <img src="<%= blog.image %>" alt="<%= blog.title %>" />
    <% } %>
    </div>

    <div class="card_body">
      <h1 class="card_title"><%= blog.title %></h1>
      <p><em><%= blog.author %></em></p>
      
      <!-- Blog datos -->
      <% if (blog.createdAt) { %>
        <p class="blog-meta">
          📅 Paskelbta: <%= new Date(blog.createdAt).toLocaleDateString('lt-LT') %>
        </p>
      <% } %>
      
      <!-- Blog turinys -->
      <div class="blog-content">
        <%- (blog.body || blog.content).replace(/\n/g, '<br>') %>
      </div>
      
      <!-- Blog veiksmai -->
      <div class="blog-actions">
        <a href="/blog" class="btn btn-back">← Atgal į sąrašą</a>
        <% if (typeof currentUser !== 'undefined' && currentUser && currentUser.role === 'admin') { %>
          <a href="/blog/<%= blogId %>/edit" class="btn btn-edit">✏️ Redaguoti</a>
          <button onclick="deleteBlog('<%= blogId %>')" class="btn btn-delete">
            🗑️ Ištrinti Įrašą
          </button>
        <% } %>
      </div>
    </div>
  </article>
  
  <!-- Komentarų sekcija -->
  <section class="comments-section">
    <h2>Komentarai</h2>

    <!-- Komentarų forma -->
    <div class="comment-form-container">
      <h3>Palikti komentarą</h3>
      <form id="commentForm" class="comment-form">
        <div class="form-group">
          <label for="author">Jūsų vardas:</label>
          <input type="text" id="author" name="authorName" required minlength="2" placeholder="Įveskite savo vardą">
        </div>

        <div class="form-group">
          <label for="content">Komentaras:</label>
          <textarea id="content" name="commentContent" rows="4" required minlength="5" placeholder="Pasidalinkite savo mintimis..."></textarea>
        </div>

        <button type="submit" class="submit-btn">Skelbti komentarą</button>
      </form>
    </div>

    <!-- Komentarų sąrašas -->
    <div id="commentsList" class="comments-list">
      <!-- Komentarai bus įkelti čia -->
    </div>
  </section>
</section>

<script>
  // Komentarų funkcionalumas
  class CommentSystem {
    constructor(blogPostId) {
      this.blogPostId = blogPostId;
      this.init();
    }

    init() {
      this.loadComments();
      this.setupForm();
    }

    setupForm() {
      const form = document.getElementById('commentForm');
      form.addEventListener('submit', (event) => this.handleSubmit(event));
    }

    async loadComments() {
      try {
        const response = await fetch(`/api/blog/${this.blogPostId}/comments`);
        const data = await response.json();

        if (data.success) {
          this.displayComments(data.blogComments);
        }
      } catch (error) {
        console.error('Klaida įkeliant komentarus:', error);
      }
    }

    async handleSubmit(event) {
      event.preventDefault();

      const formData = new FormData(event.target);
      const commentData = {
        authorName: formData.get('authorName'),
        commentContent: formData.get('commentContent')
      };

      try {
        const response = await fetch(`/api/blog/${this.blogPostId}/comments`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(commentData)
        });

        const data = await response.json();

        if (data.success) {
          event.target.reset();
          this.loadComments(); // Perkrauti komentarus
          this.showMessage('Komentaras sėkmingai paskelbtas!', 'success');
        } else {
          this.showMessage(data.message, 'error');
        }
      } catch (error) {
        console.error('Klaida siunčiant komentarą:', error);
        this.showMessage('Klaida siunčiant komentarą. Bandykite dar kartą.', 'error');
      }
    }

    displayComments(blogComments) {
      const container = document.getElementById('commentsList');

      // Jei tuščias
      if (blogComments.length === 0) {
        container.innerHTML = '<p class="no-comments">Dar nėra komentarų. Būkite pirmas!</p>';
        return;
      }

      // VARIANTAS SU forEach (vietoj map)
      let html = '';  // ← Pradinis tuščias string
      
      blogComments.forEach(comment => {
        // Pradedame komentaro HTML
        html += `<div class="comment">`;
        
        // Header su autoriumi ir data
        html += `
          <div class="comment-header">
            <strong class="comment-author">${this.escapeHtml(comment.authorName)}</strong>
            <span class="comment-date">${this.formatDate(comment.createdAtDate)}</span>
          </div>
        `;
        
        // Komentaro turinys
        html += `
          <div class="comment-content">
            ${this.escapeHtml(comment.commentContent)}
          </div>
        `;

        // Veiksmai su komentarais (redaguoti / trinti)
        html += `
          <div class="comment-actions" style="margin-top:8px; display:flex; gap:8px;">
            <button type="button" class="btn btn-edit btn-sm edit-comment" data-comment-id="${comment._id}">✏️ Redaguoti</button>
            <button type="button" class="btn btn-delete btn-sm delete-comment" data-comment-id="${comment._id}">🗑️ Trinti</button>
          </div>
        `;
        
        // REPLIES (atsakymai) - jei yra
        if (comment.replies && comment.replies.length > 0) {
          html += `<div class="replies">`;
          html += `<h4 class="replies-title">Atsakymai (${comment.replies.length})</h4>`;
          
          // forEach per replies
          comment.replies.forEach(reply => {
            html += `
              <div class="reply">
                <div>
                  <strong>${this.escapeHtml(reply.authorName)}</strong>
                  <span>${this.formatDate(reply.createdAtDate)}</span>
                </div>
                <div>
                  ${this.escapeHtml(reply.replyContent)}
                </div>
              </div>
            `;
          });
          
          html += `</div>`; // Uždaryti replies div
        }
        
        // Atsakymo forma kiekvienam komentarui (paslėpta pagal nutylėjimą)
        html += `
          <div class="reply-box">
            <button type="button" class="toggle-reply" data-comment-id="${comment._id}" aria-expanded="false">↩️ Atsakyti į šį komentarą</button>
            <form class="reply-form" data-comment-id="${comment._id}" style="display:none; margin-top:8px;">
              <div class="form-group">
                <label>Jūsų vardas</label>
                <input type="text" name="authorName" required minlength="2" placeholder="Pvz.: Jonas" />
              </div>
              <div class="form-group">
                <label>Jūsų atsakymas</label>
                <textarea name="replyContent" rows="2" required minlength="2" placeholder="Parašykite atsakymą..."></textarea>
              </div>
              <button type="submit" class="submit-reply-btn">Paskelbti atsakymą</button>
            </form>
          </div>
        `;

        html += `</div>`; // Uždaryti comment div
      });
      
      // Įdėti sugeneruotą HTML į konteinerį
      container.innerHTML = html;

      // Pririšti "Atsakyti" mygtukų toggle
      document.querySelectorAll('.toggle-reply').forEach(btn => {
        btn.addEventListener('click', () => {
          const id = btn.getAttribute('data-comment-id');
          const form = document.querySelector(`form.reply-form[data-comment-id="${id}"]`);
          const isHidden = form.style.display === 'none';
          form.style.display = isHidden ? 'block' : 'none';
          btn.setAttribute('aria-expanded', String(isHidden));
        });
      });

      // Pririšti atsakymo formų submit įvykius
      document.querySelectorAll('.reply-form').forEach(form => {
        form.addEventListener('submit', async (event) => {
          event.preventDefault();
          const commentId = form.getAttribute('data-comment-id');
          const formData = new FormData(form);
          const payload = {
            authorName: formData.get('authorName'),
            replyContent: formData.get('replyContent')
          };

          try {
            const resp = await fetch(`/api/blog/${this.blogPostId}/comments/${commentId}/replies`, {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify(payload)
            });
            const data = await resp.json();
            if (data.success) {
              form.reset();
              form.style.display = 'none';
              this.loadComments();
              this.showMessage('Atsakymas sėkmingai pridėtas!', 'success');
            } else {
              this.showMessage(data.message || 'Nepavyko pridėti atsakymo', 'error');
            }
          } catch (err) {
            console.error('Klaida siunčiant atsakymą:', err);
            this.showMessage('Klaida siunčiant atsakymą. Bandykite dar kartą.', 'error');
          }
        });
      });

      // Pririšti REDAGUOTI komentarą
      document.querySelectorAll('.edit-comment').forEach(btn => {
        btn.addEventListener('click', () => {
          const id = btn.getAttribute('data-comment-id');
          this.enterEditModeForComment(id);
        });
      });

      // Pririšti TRINTI komentarą
      document.querySelectorAll('.delete-comment').forEach(btn => {
        btn.addEventListener('click', async () => {
          const id = btn.getAttribute('data-comment-id');
          const confirmed = confirm('Ar tikrai norite ištrinti šį komentarą?');
          if (!confirmed) return;
          try {
            const resp = await fetch(`/api/blog/${this.blogPostId}/comments/${id}`, { method: 'DELETE' });
            const data = await resp.json();
            if (data.success) {
              this.loadComments();
              this.showMessage('Komentaras sėkmingai ištrintas!', 'success');
            } else {
              this.showMessage(data.message || 'Nepavyko ištrinti komentaro', 'error');
            }
          } catch (err) {
            console.error('Klaida trinant komentarą:', err);
            this.showMessage('Klaida trinant komentarą. Bandykite dar kartą.', 'error');
          }
        });
      });
    }

    formatDate(dateString) {
      const date = new Date(dateString);
      return date.toLocaleDateString('lt-LT') + ' ' + date.toLocaleTimeString('lt-LT', {
        hour: '2-digit',
        minute: '2-digit'
      });
    }

    escapeHtml(text) {
      const div = document.createElement('div');
      div.textContent = text;
      return div.innerHTML;
    }

    showMessage(message, type) {
      // Pašalinti esamą pranešimą
      const existingMessage = document.querySelector('.message');
      if (existingMessage) {
        existingMessage.remove();
      }

      // Sukurti naują pranešimą
      const messageDiv = document.createElement('div');
      messageDiv.className = `message message-${type}`;
      messageDiv.textContent = message;

      // Įterpti po forma
      const form = document.getElementById('commentForm');
      form.parentNode.insertBefore(messageDiv, form.nextSibling);

      // Pašalinti pranešimą po 5 sekundžių
      setTimeout(() => {
        if (messageDiv.parentNode) {
          messageDiv.remove();
        }
      }, 5000);
    }
  }

  // Inicializuoti komentarų sistemą, kai puslapis užsikrauna
  document.addEventListener('DOMContentLoaded', function() {
    // Gauti blog ID iš serverio perduoto kintamojo
    const blogPostId = '<%= blogId %>';

    if (blogPostId) {
      new CommentSystem(blogPostId);
    }
  });

  /**
   * Blog Delete Funkcija
   * 
   * Kaip veikia:
   * 1. Vartotojas paspaudžia "Ištrinti" mygtuką
   * 2. Iššaukiama ši funkcija su blog ID
   * 3. Patvirtinimo dialogas (confirm)
   * 4. Fetch DELETE užklausa į serverį
   * 5. Serveris ištrina iš blogs.json
   * 6. Redirect į blog sąrašą
   */
  async function deleteBlog(blogId) {
    // ŽINGSNIS 0: Patikrinti ar įrašas egzistuoja
    try {
      const existsResp = await fetch(`/blog/${blogId}/exists`);
      const existsData = await existsResp.json();
      if (!existsData.success || !existsData.exists) {
        alert('❌ Įrašas nerastas arba jau ištrintas.');
        window.location.href = '/blog';
        return;
      }
    } catch (e) {
      console.error('Klaida tikrinant egzistavimą:', e);
      alert('❌ Nepavyko patikrinti įrašo egzistavimo.');
      return;
    }

    // ŽINGSNIS 1: Patvirtinimas
    const confirmed = confirm('Ar tikrai norite ištrinti šį blog įrašą? Šis veiksmas neatšaukiamas!');
    if (!confirmed) return;
    
    try {
      // ŽINGSNIS 2: Siųsti DELETE užklausą
      const response = await fetch(`/blog/${blogId}`, {
        method: 'DELETE', // DELETE metodas (ne GET, ne POST)
        headers: {
          'Content-Type': 'application/json'
        }
      });
      
      // ŽINGSNIS 3: Parsinti atsakymą
      const data = await response.json();
      
      // ŽINGSNIS 4: Tikrinti ar sėkminga
      if (data.success) {
        // Rodyti pranešimą
        alert('✅ Blog įrašas sėkmingai ištrintas!');
        
        // Redirect į blog sąrašą
        window.location.href = data.redirectUrl || '/blog';
        
      } else {
        // Klaida iš serverio
        alert('❌ Klaida: ' + data.message);
      }
      
    } catch (error) {
      // Network klaida arba serveris neveikia
      console.error('Klaida trinant blog:', error);
      alert('❌ Nepavyko ištrinti blog įrašo. Patikrinkite interneto ryšį.');
    }
  }
</script>

<%- include('../partials/footer') %>
